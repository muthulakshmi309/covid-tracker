{"version":3,"sources":["global-info.js","country-info.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalInfo","props","console","log","useState","rows","setRows","columns","setColumns","sortModel","setSortModel","setCountryStates","history","useHistory","useEffect","covidData","data","row","indexValue","iterator","country","push","name","capital","capital_city","population","confirmed","death","deaths","recovered","states","getCountryDetails","field","headerName","width","type","sort","cellClassName","className","style","height","getRowId","onRowClick","event","pathname","state","pageSize","rowHeight","CountryInfo","countryDetails","useLocation","countryDesc","All","imgPath","abbreviation","formatNumber","value","Number","toLocaleString","updated","getStateDetails","src","Date","toDateString","App","setCovidData","fetch","then","response","json","dt","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.200cb1ff.chunk.js","sourcesContent":["// import './App.css';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useEffect, useState, setState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction GlobalInfo(props) {\r\n    console.log(props);\r\n    const [rows, setRows] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [sortModel, setSortModel] = useState([]);\r\n    const [countryStates, setCountryStates] = useState({});\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        console.log(props.covidData);\r\n        setRows(getCountryDetails(props.covidData));\r\n        setColumns([\r\n            { field: 'name', headerName: 'Country', width: 150 },\r\n            { field: 'capital', headerName: 'Capital city', width: 150 },\r\n            { field: 'population', headerName: 'Population', type: 'number', width: 150 },\r\n            { field: 'confirmed', headerName: 'Confirmed', type: 'number', width: 150, sort: 'desc' },\r\n            { field: 'death', headerName: 'Deaths', type: 'number', width: 150, cellClassName: 'death-cell' },\r\n            { field: 'recovered', headerName: 'Recovered', type: 'number', width: 150, cellClassName: 'recovered-cell' },\r\n        ]);\r\n        setSortModel([{ field: 'confirmed', sort: 'desc' }])\r\n    }, [props.covidData]);\r\n\r\n    function getCountryDetails(data) {\r\n        let row = [];\r\n        const indexValue = 'All';\r\n        for (const iterator in data) {\r\n            data[iterator][indexValue]?.country && row.push({\r\n                name: data[iterator][indexValue].country,\r\n                capital: data[iterator][indexValue].capital_city,\r\n                population: data[iterator][indexValue].population,\r\n                confirmed: data[iterator][indexValue].confirmed,\r\n                death: data[iterator][indexValue].deaths,\r\n                recovered: data[iterator][indexValue].recovered,\r\n                states: {\r\n                    ...data[iterator]\r\n                }\r\n            })\r\n        }\r\n\r\n        return row;\r\n    }\r\n\r\n    function onCountryClick(event) {\r\n        setCountryStates(event.row);        \r\n        history.push({\r\n            pathname: `/country/${event.row.name}`,\r\n            state: event.row.states\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"info-table\" style={{ height: 500, width: '100%' }}>\r\n            <DataGrid getRowId={(row) => row.name} rows={rows}\r\n                columns={columns}\r\n                onRowClick={onCountryClick}\r\n                pageSize={10} rowHeight={35} sortModel={sortModel} />\r\n            {/* <CountryInfo data={countryStates} /> */}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default GlobalInfo;\r\n\r\n","import { DataGrid } from '@material-ui/data-grid';\r\nimport { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction CountryInfo(props) {\r\n  const location = useLocation();\r\n  const countryDetails = location.state;\r\n  const countryDesc = countryDetails.All;\r\n  let imgPath = 'http://purecatamphetamine.github.io/country-flag-icons/3x2/' + countryDesc.abbreviation + '.svg';\r\n\r\n  const [rows, setRows] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [sortModel, setSortModel] = useState([]);\r\n  useEffect(() => {\r\n    setRows(getStateDetails(countryDetails));\r\n    setColumns([\r\n      { field: 'name', headerName: 'States', width: 150 },\r\n      { field: 'confirmed', headerName: 'Confirmed', type: 'number', width: 150, sort: 'desc' },\r\n      { field: 'death', headerName: 'Deaths', type: 'number', width: 150, cellClassName: 'death-cell' },\r\n      { field: 'recovered', headerName: 'Recovered', type: 'number', width: 150, cellClassName: 'recovered-cell' }\r\n    ]);\r\n    setSortModel([{ field: 'confirmed', sort: 'desc' }])\r\n  }, [countryDetails]);\r\n\r\n  function getStateDetails(data) {\r\n    let states = [];\r\n    for (const iterator in data) {\r\n      countryDesc.updated = data[iterator].updated;\r\n      iterator !== 'All' && states.push({\r\n        name: iterator,\r\n        confirmed: data[iterator].confirmed,\r\n        death: data[iterator].deaths,\r\n        recovered: data[iterator].recovered\r\n      })\r\n    }\r\n    return states;\r\n  }\r\n\r\n  function formatNumber(value) {\r\n    return Number(value).toLocaleString();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <section className='country-details'>\r\n        <div className=\"column\">\r\n          <img className=\"flag\" src={imgPath} />\r\n          <h2>{countryDesc.country}</h2>\r\n        </div>\r\n        <div className=\"column-second\">\r\n          <div className=\"column\">\r\n            <div className=\"row\"><label>Capital: </label><span>{countryDesc.capital_city}</span></div>\r\n            <div className=\"row\"><label>Updated on: </label><span>{new Date(countryDesc.updated).toDateString()}</span></div>\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className=\"row\"><label>Population: </label><span>{formatNumber(countryDesc.population)}</span></div>\r\n            <div className=\"row\"><label>Confirmed: </label><span>{formatNumber(countryDesc.confirmed)}</span></div>\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className=\"row\"><label>Deaths: </label><span>{formatNumber(countryDesc.deaths)}</span></div>\r\n            <div className=\"row\"><label>Recovered: </label><span>{formatNumber(countryDesc.recovered)}</span></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <div className=\"countries info-table\" style={{ height: 500, width: 650 }}>\r\n        <DataGrid getRowId={(row) => row.name} rows={rows}\r\n          columns={columns}\r\n          pageSize={10} rowHeight={35} sortModel={sortModel} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n\r\n","import './App.css';\nimport { useEffect, useState, setState } from 'react';\nimport GlobalInfo from './global-info';\nimport CountryInfo from './country-info';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  const [covidData, setCovidData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://covid-api.mmediagroup.fr/v1/cases')\n      .then(response => response.json()).then((dt) => {\n        setCovidData(dt);\n      });\n  }, []);\n\n  return (\n    <div className=\"covid-info\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\"><GlobalInfo covidData={covidData} /></Route>\n          <Route path=\"/global\"><GlobalInfo covidData={covidData} /></Route>\n          <Route path=\"/country/:name\"><CountryInfo /></Route>\n          <Route path=\"*\"><GlobalInfo covidData={covidData} /></Route>\n          \n          {/* <Route render={() => <Redirect to=\"/\" />} /> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}